syntax = "proto3";

package cosmos.mev.v1alpha1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/mev/v1alpha1/builder.proto";
import "cosmos/mev/v1alpha1/proposer.proto";
import "cosmos/mev/v1alpha1/commitment.proto";
import "cosmos/staking/v1beta1/staking.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/mev/types";

// Query defines the gRPC querier service.
service Query {
  // Builder queries a single builder by address.
  rpc Builder(QueryBuilderRequest) returns (QueryBuilderResponse) {
    option (google.api.http).get = "/cosmos/mev/v1alpha1/mev/{address}";
  }

  // Builder queries all builders.
  rpc Builders(QueryBuildersRequest) returns (QueryBuildersResponse) {
    option (google.api.http).get = "/cosmos/mev/v1alpha1/mevs";
  }

  // Proposer queries a single proposer by address.
  rpc Proposer(QueryProposerRequest) returns (QueryProposerResponse) {
    option (google.api.http).get = "/cosmos/mev/v1alpha1/proposer/{address}";
  }

  // Proposers queries all proposers.
  rpc Proposers(QueryProposersRequest) returns (QueryProposersResponse) {
    option (google.api.http).get = "/cosmos/mev/v1alpha1/proposer";
  }
}

// QueryBuilderRequest is the request type for the Query/Builder RPC method.
message QueryBuilderRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryBuilderResponse is the response type for the Query/Builders RPC method.
message QueryBuilderResponse {
  Builder builder = 1 [(gogoproto.nullable) = false];
}

// QueryBuildersRequest is the request type for the Query/Builders RPC method.
message QueryBuildersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBuildersResponse is the response type for the Query/Builder RPC method.
message QueryBuildersResponse {
  repeated Builder                       builders   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProposerRequest is the request type for the Query/Proposer RPC method.
message QueryProposerRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bool infractions = 2; // Include infractions in the result.
}

// QueryProposerResponse is the response type for the Query/Proposer RPC method.
message QueryProposerResponse {
  Proposer proposer = 1 [(gogoproto.nullable) = false];
  cosmos.staking.v1beta1.Validator validator = 2;
  repeated SegmentCommitment infractions = 3;
}

// QueryProposersRequest is the request type for the Query/Proposers RPC method.
message QueryProposersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryProposersResponse is the response type for the Query/Proposers RPC method.
message QueryProposersResponse {
  repeated Proposer                      proposers  = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
