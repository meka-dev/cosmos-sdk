// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package mevv1alpha1

import (
	_ "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_SegmentCommitment_5_list)(nil)

type _SegmentCommitment_5_list struct {
	list *[]string
}

func (x *_SegmentCommitment_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SegmentCommitment_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_SegmentCommitment_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_SegmentCommitment_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_SegmentCommitment_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message SegmentCommitment at list field PreferenceIds as it is not of Message kind"))
}

func (x *_SegmentCommitment_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_SegmentCommitment_5_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_SegmentCommitment_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SegmentCommitment                    protoreflect.MessageDescriptor
	fd_SegmentCommitment_proposer_address   protoreflect.FieldDescriptor
	fd_SegmentCommitment_builder_address    protoreflect.FieldDescriptor
	fd_SegmentCommitment_chain_id           protoreflect.FieldDescriptor
	fd_SegmentCommitment_height             protoreflect.FieldDescriptor
	fd_SegmentCommitment_preference_ids     protoreflect.FieldDescriptor
	fd_SegmentCommitment_prefix_offset      protoreflect.FieldDescriptor
	fd_SegmentCommitment_prefix_length      protoreflect.FieldDescriptor
	fd_SegmentCommitment_prefix_hash        protoreflect.FieldDescriptor
	fd_SegmentCommitment_segment_offset     protoreflect.FieldDescriptor
	fd_SegmentCommitment_segment_length     protoreflect.FieldDescriptor
	fd_SegmentCommitment_segment_bytes      protoreflect.FieldDescriptor
	fd_SegmentCommitment_segment_gas        protoreflect.FieldDescriptor
	fd_SegmentCommitment_segment_hash       protoreflect.FieldDescriptor
	fd_SegmentCommitment_payment_promise    protoreflect.FieldDescriptor
	fd_SegmentCommitment_proposer_signature protoreflect.FieldDescriptor
	fd_SegmentCommitment_builder_signature  protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_mev_v1alpha1_commitment_proto_init()
	md_SegmentCommitment = File_cosmos_mev_v1alpha1_commitment_proto.Messages().ByName("SegmentCommitment")
	fd_SegmentCommitment_proposer_address = md_SegmentCommitment.Fields().ByName("proposer_address")
	fd_SegmentCommitment_builder_address = md_SegmentCommitment.Fields().ByName("builder_address")
	fd_SegmentCommitment_chain_id = md_SegmentCommitment.Fields().ByName("chain_id")
	fd_SegmentCommitment_height = md_SegmentCommitment.Fields().ByName("height")
	fd_SegmentCommitment_preference_ids = md_SegmentCommitment.Fields().ByName("preference_ids")
	fd_SegmentCommitment_prefix_offset = md_SegmentCommitment.Fields().ByName("prefix_offset")
	fd_SegmentCommitment_prefix_length = md_SegmentCommitment.Fields().ByName("prefix_length")
	fd_SegmentCommitment_prefix_hash = md_SegmentCommitment.Fields().ByName("prefix_hash")
	fd_SegmentCommitment_segment_offset = md_SegmentCommitment.Fields().ByName("segment_offset")
	fd_SegmentCommitment_segment_length = md_SegmentCommitment.Fields().ByName("segment_length")
	fd_SegmentCommitment_segment_bytes = md_SegmentCommitment.Fields().ByName("segment_bytes")
	fd_SegmentCommitment_segment_gas = md_SegmentCommitment.Fields().ByName("segment_gas")
	fd_SegmentCommitment_segment_hash = md_SegmentCommitment.Fields().ByName("segment_hash")
	fd_SegmentCommitment_payment_promise = md_SegmentCommitment.Fields().ByName("payment_promise")
	fd_SegmentCommitment_proposer_signature = md_SegmentCommitment.Fields().ByName("proposer_signature")
	fd_SegmentCommitment_builder_signature = md_SegmentCommitment.Fields().ByName("builder_signature")
}

var _ protoreflect.Message = (*fastReflection_SegmentCommitment)(nil)

type fastReflection_SegmentCommitment SegmentCommitment

func (x *SegmentCommitment) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SegmentCommitment)(x)
}

func (x *SegmentCommitment) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_mev_v1alpha1_commitment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SegmentCommitment_messageType fastReflection_SegmentCommitment_messageType
var _ protoreflect.MessageType = fastReflection_SegmentCommitment_messageType{}

type fastReflection_SegmentCommitment_messageType struct{}

func (x fastReflection_SegmentCommitment_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SegmentCommitment)(nil)
}
func (x fastReflection_SegmentCommitment_messageType) New() protoreflect.Message {
	return new(fastReflection_SegmentCommitment)
}
func (x fastReflection_SegmentCommitment_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SegmentCommitment
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SegmentCommitment) Descriptor() protoreflect.MessageDescriptor {
	return md_SegmentCommitment
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SegmentCommitment) Type() protoreflect.MessageType {
	return _fastReflection_SegmentCommitment_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SegmentCommitment) New() protoreflect.Message {
	return new(fastReflection_SegmentCommitment)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SegmentCommitment) Interface() protoreflect.ProtoMessage {
	return (*SegmentCommitment)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SegmentCommitment) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ProposerAddress != "" {
		value := protoreflect.ValueOfString(x.ProposerAddress)
		if !f(fd_SegmentCommitment_proposer_address, value) {
			return
		}
	}
	if x.BuilderAddress != "" {
		value := protoreflect.ValueOfString(x.BuilderAddress)
		if !f(fd_SegmentCommitment_builder_address, value) {
			return
		}
	}
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_SegmentCommitment_chain_id, value) {
			return
		}
	}
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_SegmentCommitment_height, value) {
			return
		}
	}
	if len(x.PreferenceIds) != 0 {
		value := protoreflect.ValueOfList(&_SegmentCommitment_5_list{list: &x.PreferenceIds})
		if !f(fd_SegmentCommitment_preference_ids, value) {
			return
		}
	}
	if x.PrefixOffset != int32(0) {
		value := protoreflect.ValueOfInt32(x.PrefixOffset)
		if !f(fd_SegmentCommitment_prefix_offset, value) {
			return
		}
	}
	if x.PrefixLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.PrefixLength)
		if !f(fd_SegmentCommitment_prefix_length, value) {
			return
		}
	}
	if len(x.PrefixHash) != 0 {
		value := protoreflect.ValueOfBytes(x.PrefixHash)
		if !f(fd_SegmentCommitment_prefix_hash, value) {
			return
		}
	}
	if x.SegmentOffset != int32(0) {
		value := protoreflect.ValueOfInt32(x.SegmentOffset)
		if !f(fd_SegmentCommitment_segment_offset, value) {
			return
		}
	}
	if x.SegmentLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.SegmentLength)
		if !f(fd_SegmentCommitment_segment_length, value) {
			return
		}
	}
	if x.SegmentBytes != int32(0) {
		value := protoreflect.ValueOfInt32(x.SegmentBytes)
		if !f(fd_SegmentCommitment_segment_bytes, value) {
			return
		}
	}
	if x.SegmentGas != int32(0) {
		value := protoreflect.ValueOfInt32(x.SegmentGas)
		if !f(fd_SegmentCommitment_segment_gas, value) {
			return
		}
	}
	if len(x.SegmentHash) != 0 {
		value := protoreflect.ValueOfBytes(x.SegmentHash)
		if !f(fd_SegmentCommitment_segment_hash, value) {
			return
		}
	}
	if x.PaymentPromise != "" {
		value := protoreflect.ValueOfString(x.PaymentPromise)
		if !f(fd_SegmentCommitment_payment_promise, value) {
			return
		}
	}
	if len(x.ProposerSignature) != 0 {
		value := protoreflect.ValueOfBytes(x.ProposerSignature)
		if !f(fd_SegmentCommitment_proposer_signature, value) {
			return
		}
	}
	if len(x.BuilderSignature) != 0 {
		value := protoreflect.ValueOfBytes(x.BuilderSignature)
		if !f(fd_SegmentCommitment_builder_signature, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SegmentCommitment) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_address":
		return x.ProposerAddress != ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_address":
		return x.BuilderAddress != ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.chain_id":
		return x.ChainId != ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.height":
		return x.Height != int64(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.preference_ids":
		return len(x.PreferenceIds) != 0
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_offset":
		return x.PrefixOffset != int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_length":
		return x.PrefixLength != int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_hash":
		return len(x.PrefixHash) != 0
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_offset":
		return x.SegmentOffset != int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_length":
		return x.SegmentLength != int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_bytes":
		return x.SegmentBytes != int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_gas":
		return x.SegmentGas != int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_hash":
		return len(x.SegmentHash) != 0
	case "cosmos.mev.v1alpha1.SegmentCommitment.payment_promise":
		return x.PaymentPromise != ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_signature":
		return len(x.ProposerSignature) != 0
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_signature":
		return len(x.BuilderSignature) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.mev.v1alpha1.SegmentCommitment"))
		}
		panic(fmt.Errorf("message cosmos.mev.v1alpha1.SegmentCommitment does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SegmentCommitment) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_address":
		x.ProposerAddress = ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_address":
		x.BuilderAddress = ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.chain_id":
		x.ChainId = ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.height":
		x.Height = int64(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.preference_ids":
		x.PreferenceIds = nil
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_offset":
		x.PrefixOffset = int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_length":
		x.PrefixLength = int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_hash":
		x.PrefixHash = nil
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_offset":
		x.SegmentOffset = int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_length":
		x.SegmentLength = int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_bytes":
		x.SegmentBytes = int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_gas":
		x.SegmentGas = int32(0)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_hash":
		x.SegmentHash = nil
	case "cosmos.mev.v1alpha1.SegmentCommitment.payment_promise":
		x.PaymentPromise = ""
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_signature":
		x.ProposerSignature = nil
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_signature":
		x.BuilderSignature = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.mev.v1alpha1.SegmentCommitment"))
		}
		panic(fmt.Errorf("message cosmos.mev.v1alpha1.SegmentCommitment does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SegmentCommitment) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_address":
		value := x.ProposerAddress
		return protoreflect.ValueOfString(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_address":
		value := x.BuilderAddress
		return protoreflect.ValueOfString(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.preference_ids":
		if len(x.PreferenceIds) == 0 {
			return protoreflect.ValueOfList(&_SegmentCommitment_5_list{})
		}
		listValue := &_SegmentCommitment_5_list{list: &x.PreferenceIds}
		return protoreflect.ValueOfList(listValue)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_offset":
		value := x.PrefixOffset
		return protoreflect.ValueOfInt32(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_length":
		value := x.PrefixLength
		return protoreflect.ValueOfInt32(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_hash":
		value := x.PrefixHash
		return protoreflect.ValueOfBytes(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_offset":
		value := x.SegmentOffset
		return protoreflect.ValueOfInt32(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_length":
		value := x.SegmentLength
		return protoreflect.ValueOfInt32(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_bytes":
		value := x.SegmentBytes
		return protoreflect.ValueOfInt32(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_gas":
		value := x.SegmentGas
		return protoreflect.ValueOfInt32(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_hash":
		value := x.SegmentHash
		return protoreflect.ValueOfBytes(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.payment_promise":
		value := x.PaymentPromise
		return protoreflect.ValueOfString(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_signature":
		value := x.ProposerSignature
		return protoreflect.ValueOfBytes(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_signature":
		value := x.BuilderSignature
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.mev.v1alpha1.SegmentCommitment"))
		}
		panic(fmt.Errorf("message cosmos.mev.v1alpha1.SegmentCommitment does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SegmentCommitment) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_address":
		x.ProposerAddress = value.Interface().(string)
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_address":
		x.BuilderAddress = value.Interface().(string)
	case "cosmos.mev.v1alpha1.SegmentCommitment.chain_id":
		x.ChainId = value.Interface().(string)
	case "cosmos.mev.v1alpha1.SegmentCommitment.height":
		x.Height = value.Int()
	case "cosmos.mev.v1alpha1.SegmentCommitment.preference_ids":
		lv := value.List()
		clv := lv.(*_SegmentCommitment_5_list)
		x.PreferenceIds = *clv.list
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_offset":
		x.PrefixOffset = int32(value.Int())
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_length":
		x.PrefixLength = int32(value.Int())
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_hash":
		x.PrefixHash = value.Bytes()
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_offset":
		x.SegmentOffset = int32(value.Int())
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_length":
		x.SegmentLength = int32(value.Int())
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_bytes":
		x.SegmentBytes = int32(value.Int())
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_gas":
		x.SegmentGas = int32(value.Int())
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_hash":
		x.SegmentHash = value.Bytes()
	case "cosmos.mev.v1alpha1.SegmentCommitment.payment_promise":
		x.PaymentPromise = value.Interface().(string)
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_signature":
		x.ProposerSignature = value.Bytes()
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_signature":
		x.BuilderSignature = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.mev.v1alpha1.SegmentCommitment"))
		}
		panic(fmt.Errorf("message cosmos.mev.v1alpha1.SegmentCommitment does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SegmentCommitment) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.mev.v1alpha1.SegmentCommitment.preference_ids":
		if x.PreferenceIds == nil {
			x.PreferenceIds = []string{}
		}
		value := &_SegmentCommitment_5_list{list: &x.PreferenceIds}
		return protoreflect.ValueOfList(value)
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_address":
		panic(fmt.Errorf("field proposer_address of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_address":
		panic(fmt.Errorf("field builder_address of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.chain_id":
		panic(fmt.Errorf("field chain_id of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.height":
		panic(fmt.Errorf("field height of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_offset":
		panic(fmt.Errorf("field prefix_offset of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_length":
		panic(fmt.Errorf("field prefix_length of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_hash":
		panic(fmt.Errorf("field prefix_hash of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_offset":
		panic(fmt.Errorf("field segment_offset of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_length":
		panic(fmt.Errorf("field segment_length of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_bytes":
		panic(fmt.Errorf("field segment_bytes of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_gas":
		panic(fmt.Errorf("field segment_gas of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_hash":
		panic(fmt.Errorf("field segment_hash of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.payment_promise":
		panic(fmt.Errorf("field payment_promise of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_signature":
		panic(fmt.Errorf("field proposer_signature of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_signature":
		panic(fmt.Errorf("field builder_signature of message cosmos.mev.v1alpha1.SegmentCommitment is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.mev.v1alpha1.SegmentCommitment"))
		}
		panic(fmt.Errorf("message cosmos.mev.v1alpha1.SegmentCommitment does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SegmentCommitment) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_address":
		return protoreflect.ValueOfString("")
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_address":
		return protoreflect.ValueOfString("")
	case "cosmos.mev.v1alpha1.SegmentCommitment.chain_id":
		return protoreflect.ValueOfString("")
	case "cosmos.mev.v1alpha1.SegmentCommitment.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.preference_ids":
		list := []string{}
		return protoreflect.ValueOfList(&_SegmentCommitment_5_list{list: &list})
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_offset":
		return protoreflect.ValueOfInt32(int32(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.prefix_hash":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_offset":
		return protoreflect.ValueOfInt32(int32(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_bytes":
		return protoreflect.ValueOfInt32(int32(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_gas":
		return protoreflect.ValueOfInt32(int32(0))
	case "cosmos.mev.v1alpha1.SegmentCommitment.segment_hash":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.mev.v1alpha1.SegmentCommitment.payment_promise":
		return protoreflect.ValueOfString("")
	case "cosmos.mev.v1alpha1.SegmentCommitment.proposer_signature":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.mev.v1alpha1.SegmentCommitment.builder_signature":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.mev.v1alpha1.SegmentCommitment"))
		}
		panic(fmt.Errorf("message cosmos.mev.v1alpha1.SegmentCommitment does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SegmentCommitment) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.mev.v1alpha1.SegmentCommitment", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SegmentCommitment) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SegmentCommitment) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SegmentCommitment) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SegmentCommitment) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SegmentCommitment)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ProposerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BuilderAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if len(x.PreferenceIds) > 0 {
			for _, s := range x.PreferenceIds {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.PrefixOffset != 0 {
			n += 1 + runtime.Sov(uint64(x.PrefixOffset))
		}
		if x.PrefixLength != 0 {
			n += 1 + runtime.Sov(uint64(x.PrefixLength))
		}
		l = len(x.PrefixHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SegmentOffset != 0 {
			n += 1 + runtime.Sov(uint64(x.SegmentOffset))
		}
		if x.SegmentLength != 0 {
			n += 1 + runtime.Sov(uint64(x.SegmentLength))
		}
		if x.SegmentBytes != 0 {
			n += 1 + runtime.Sov(uint64(x.SegmentBytes))
		}
		if x.SegmentGas != 0 {
			n += 1 + runtime.Sov(uint64(x.SegmentGas))
		}
		l = len(x.SegmentHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PaymentPromise)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProposerSignature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BuilderSignature)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SegmentCommitment)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BuilderSignature) > 0 {
			i -= len(x.BuilderSignature)
			copy(dAtA[i:], x.BuilderSignature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BuilderSignature)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.ProposerSignature) > 0 {
			i -= len(x.ProposerSignature)
			copy(dAtA[i:], x.ProposerSignature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposerSignature)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.PaymentPromise) > 0 {
			i -= len(x.PaymentPromise)
			copy(dAtA[i:], x.PaymentPromise)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PaymentPromise)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.SegmentHash) > 0 {
			i -= len(x.SegmentHash)
			copy(dAtA[i:], x.SegmentHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SegmentHash)))
			i--
			dAtA[i] = 0x6a
		}
		if x.SegmentGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SegmentGas))
			i--
			dAtA[i] = 0x60
		}
		if x.SegmentBytes != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SegmentBytes))
			i--
			dAtA[i] = 0x58
		}
		if x.SegmentLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SegmentLength))
			i--
			dAtA[i] = 0x50
		}
		if x.SegmentOffset != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SegmentOffset))
			i--
			dAtA[i] = 0x48
		}
		if len(x.PrefixHash) > 0 {
			i -= len(x.PrefixHash)
			copy(dAtA[i:], x.PrefixHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PrefixHash)))
			i--
			dAtA[i] = 0x42
		}
		if x.PrefixLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PrefixLength))
			i--
			dAtA[i] = 0x38
		}
		if x.PrefixOffset != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PrefixOffset))
			i--
			dAtA[i] = 0x30
		}
		if len(x.PreferenceIds) > 0 {
			for iNdEx := len(x.PreferenceIds) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.PreferenceIds[iNdEx])
				copy(dAtA[i:], x.PreferenceIds[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PreferenceIds[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x20
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.BuilderAddress) > 0 {
			i -= len(x.BuilderAddress)
			copy(dAtA[i:], x.BuilderAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BuilderAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ProposerAddress) > 0 {
			i -= len(x.ProposerAddress)
			copy(dAtA[i:], x.ProposerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposerAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SegmentCommitment)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SegmentCommitment: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SegmentCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProposerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BuilderAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BuilderAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreferenceIds", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PreferenceIds = append(x.PreferenceIds, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrefixOffset", wireType)
				}
				x.PrefixOffset = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PrefixOffset |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrefixLength", wireType)
				}
				x.PrefixLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PrefixLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrefixHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PrefixHash = append(x.PrefixHash[:0], dAtA[iNdEx:postIndex]...)
				if x.PrefixHash == nil {
					x.PrefixHash = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SegmentOffset", wireType)
				}
				x.SegmentOffset = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SegmentOffset |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SegmentLength", wireType)
				}
				x.SegmentLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SegmentLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SegmentBytes", wireType)
				}
				x.SegmentBytes = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SegmentBytes |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SegmentGas", wireType)
				}
				x.SegmentGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SegmentGas |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SegmentHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SegmentHash = append(x.SegmentHash[:0], dAtA[iNdEx:postIndex]...)
				if x.SegmentHash == nil {
					x.SegmentHash = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PaymentPromise", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PaymentPromise = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposerSignature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProposerSignature = append(x.ProposerSignature[:0], dAtA[iNdEx:postIndex]...)
				if x.ProposerSignature == nil {
					x.ProposerSignature = []byte{}
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BuilderSignature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BuilderSignature = append(x.BuilderSignature[:0], dAtA[iNdEx:postIndex]...)
				if x.BuilderSignature == nil {
					x.BuilderSignature = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cosmos/mev/v1alpha1/commitment.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SegmentCommitment represents a mutual commitment between a proposer and a builder,
// in which a proposer commits to include a winning builder's segment as a result of
// an spot auction of block space in the builder module, and a builder commits to
// to produce that segment according to the proposer's preferences and to pay the
// promised amount.
type SegmentCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposer_address is the address of the proposer's pub key.
	ProposerAddress string `protobuf:"bytes,1,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"`
	// builder_address is the address of the builder's pub key.
	BuilderAddress string `protobuf:"bytes,2,opt,name=builder_address,json=builderAddress,proto3" json:"builder_address,omitempty"`
	// chain_id is the id of the chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// height of the block the segment is for.
	Height int64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// preference_ids the proposer asked the builder to honor.
	PreferenceIds []string `protobuf:"bytes,5,rep,name=preference_ids,json=preferenceIds,proto3" json:"preference_ids,omitempty"`
	// prefix_offset of the prefix section of the block being built.
	PrefixOffset int32 `protobuf:"varint,6,opt,name=prefix_offset,json=prefixOffset,proto3" json:"prefix_offset,omitempty"`
	// prefix_length of the prefix section of the block being built.
	PrefixLength int32 `protobuf:"varint,7,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// prefix_hash of the prefix section transactions.
	PrefixHash []byte `protobuf:"bytes,8,opt,name=prefix_hash,json=prefixHash,proto3" json:"prefix_hash,omitempty"`
	// segment_offset of the segment section of the block being built.
	SegmentOffset int32 `protobuf:"varint,9,opt,name=segment_offset,json=segmentOffset,proto3" json:"segment_offset,omitempty"`
	// segment_length of the segment section of the block being built.
	SegmentLength int32 `protobuf:"varint,10,opt,name=segment_length,json=segmentLength,proto3" json:"segment_length,omitempty"`
	// segment_bytes count of the segment section of the block being built.
	SegmentBytes int32 `protobuf:"varint,11,opt,name=segment_bytes,json=segmentBytes,proto3" json:"segment_bytes,omitempty"`
	// segment_gas used of the segment section of the block being built.
	SegmentGas int32 `protobuf:"varint,12,opt,name=segment_gas,json=segmentGas,proto3" json:"segment_gas,omitempty"`
	// segment_hash of the segment section transactions.
	SegmentHash []byte `protobuf:"bytes,13,opt,name=segment_hash,json=segmentHash,proto3" json:"segment_hash,omitempty"`
	// payment_promise the builder offers for segment inclusion.
	PaymentPromise string `protobuf:"bytes,14,opt,name=payment_promise,json=paymentPromise,proto3" json:"payment_promise,omitempty"`
	// proposer_signature of all the above fields as defined
	// by the builder module.
	ProposerSignature []byte `protobuf:"bytes,15,opt,name=proposer_signature,json=proposerSignature,proto3" json:"proposer_signature,omitempty"`
	// builder_signature of all the above fields as defined
	// by the builder module.
	BuilderSignature []byte `protobuf:"bytes,16,opt,name=builder_signature,json=builderSignature,proto3" json:"builder_signature,omitempty"`
}

func (x *SegmentCommitment) Reset() {
	*x = SegmentCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_mev_v1alpha1_commitment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentCommitment) ProtoMessage() {}

// Deprecated: Use SegmentCommitment.ProtoReflect.Descriptor instead.
func (*SegmentCommitment) Descriptor() ([]byte, []int) {
	return file_cosmos_mev_v1alpha1_commitment_proto_rawDescGZIP(), []int{0}
}

func (x *SegmentCommitment) GetProposerAddress() string {
	if x != nil {
		return x.ProposerAddress
	}
	return ""
}

func (x *SegmentCommitment) GetBuilderAddress() string {
	if x != nil {
		return x.BuilderAddress
	}
	return ""
}

func (x *SegmentCommitment) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SegmentCommitment) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SegmentCommitment) GetPreferenceIds() []string {
	if x != nil {
		return x.PreferenceIds
	}
	return nil
}

func (x *SegmentCommitment) GetPrefixOffset() int32 {
	if x != nil {
		return x.PrefixOffset
	}
	return 0
}

func (x *SegmentCommitment) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *SegmentCommitment) GetPrefixHash() []byte {
	if x != nil {
		return x.PrefixHash
	}
	return nil
}

func (x *SegmentCommitment) GetSegmentOffset() int32 {
	if x != nil {
		return x.SegmentOffset
	}
	return 0
}

func (x *SegmentCommitment) GetSegmentLength() int32 {
	if x != nil {
		return x.SegmentLength
	}
	return 0
}

func (x *SegmentCommitment) GetSegmentBytes() int32 {
	if x != nil {
		return x.SegmentBytes
	}
	return 0
}

func (x *SegmentCommitment) GetSegmentGas() int32 {
	if x != nil {
		return x.SegmentGas
	}
	return 0
}

func (x *SegmentCommitment) GetSegmentHash() []byte {
	if x != nil {
		return x.SegmentHash
	}
	return nil
}

func (x *SegmentCommitment) GetPaymentPromise() string {
	if x != nil {
		return x.PaymentPromise
	}
	return ""
}

func (x *SegmentCommitment) GetProposerSignature() []byte {
	if x != nil {
		return x.ProposerSignature
	}
	return nil
}

func (x *SegmentCommitment) GetBuilderSignature() []byte {
	if x != nil {
		return x.BuilderSignature
	}
	return nil
}

var File_cosmos_mev_v1alpha1_commitment_proto protoreflect.FileDescriptor

var file_cosmos_mev_v1alpha1_commitment_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x76, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x6d,
	0x65, 0x76, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x05, 0x0a, 0x11, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d,
	0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00,
	0x42, 0xca, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x6d, 0x65, 0x76, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x30, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x76, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x65, 0x76, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x4d, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x4d, 0x65, 0x76, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x13,
	0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5c, 0x4d, 0x65, 0x76, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5c, 0x4d, 0x65, 0x76,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x3a, 0x3a,
	0x4d, 0x65, 0x76, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cosmos_mev_v1alpha1_commitment_proto_rawDescOnce sync.Once
	file_cosmos_mev_v1alpha1_commitment_proto_rawDescData = file_cosmos_mev_v1alpha1_commitment_proto_rawDesc
)

func file_cosmos_mev_v1alpha1_commitment_proto_rawDescGZIP() []byte {
	file_cosmos_mev_v1alpha1_commitment_proto_rawDescOnce.Do(func() {
		file_cosmos_mev_v1alpha1_commitment_proto_rawDescData = protoimpl.X.CompressGZIP(file_cosmos_mev_v1alpha1_commitment_proto_rawDescData)
	})
	return file_cosmos_mev_v1alpha1_commitment_proto_rawDescData
}

var file_cosmos_mev_v1alpha1_commitment_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cosmos_mev_v1alpha1_commitment_proto_goTypes = []interface{}{
	(*SegmentCommitment)(nil), // 0: cosmos.mev.v1alpha1.SegmentCommitment
}
var file_cosmos_mev_v1alpha1_commitment_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cosmos_mev_v1alpha1_commitment_proto_init() }
func file_cosmos_mev_v1alpha1_commitment_proto_init() {
	if File_cosmos_mev_v1alpha1_commitment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cosmos_mev_v1alpha1_commitment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cosmos_mev_v1alpha1_commitment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cosmos_mev_v1alpha1_commitment_proto_goTypes,
		DependencyIndexes: file_cosmos_mev_v1alpha1_commitment_proto_depIdxs,
		MessageInfos:      file_cosmos_mev_v1alpha1_commitment_proto_msgTypes,
	}.Build()
	File_cosmos_mev_v1alpha1_commitment_proto = out.File
	file_cosmos_mev_v1alpha1_commitment_proto_rawDesc = nil
	file_cosmos_mev_v1alpha1_commitment_proto_goTypes = nil
	file_cosmos_mev_v1alpha1_commitment_proto_depIdxs = nil
}
