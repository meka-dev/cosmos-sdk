// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cosmos/mev/v1alpha1/tx.proto

package mevv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_RegisterBuilder_FullMethodName  = "/cosmos.mev.v1alpha1.Msg/RegisterBuilder"
	Msg_EditBuilder_FullMethodName      = "/cosmos.mev.v1alpha1.Msg/EditBuilder"
	Msg_RegisterProposer_FullMethodName = "/cosmos.mev.v1alpha1.Msg/RegisterProposer"
	Msg_CommitSegment_FullMethodName    = "/cosmos.mev.v1alpha1.Msg/CommitSegment"
	Msg_ReportProposer_FullMethodName   = "/cosmos.mev.v1alpha1.Msg/ReportProposer"
	Msg_UpdateParams_FullMethodName     = "/cosmos.mev.v1alpha1.Msg/UpdateParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterBuilder defines a method for registering an off-chain builder.
	RegisterBuilder(ctx context.Context, in *MsgRegisterBuilder, opts ...grpc.CallOption) (*MsgRegisterBuilderResponse, error)
	// EditBuilder defines a method for editing an off-chain builder.
	EditBuilder(ctx context.Context, in *MsgEditBuilder, opts ...grpc.CallOption) (*MsgEditBuilderResponse, error)
	// RegisterProposer defines a method for registering a proposer for off-chain building.
	RegisterProposer(ctx context.Context, in *MsgRegisterProposer, opts ...grpc.CallOption) (*MsgRegisterProposerResponse, error)
	// CommitSegment defines a method for committing a builder segment which also
	// transfers their promised payment to the builder module address.
	CommitSegment(ctx context.Context, in *MsgCommitSegment, opts ...grpc.CallOption) (*MsgCommitSegmentResponse, error)
	// ReportProposer defines a method for a builder to submit evidence
	// that a proposer didn't honour its proposer commitment.
	ReportProposer(ctx context.Context, in *MsgReportProposer, opts ...grpc.CallOption) (*MsgReportProposerResponse, error)
	// UpdateParams defines a governance operation for updating the x/mev module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterBuilder(ctx context.Context, in *MsgRegisterBuilder, opts ...grpc.CallOption) (*MsgRegisterBuilderResponse, error) {
	out := new(MsgRegisterBuilderResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterBuilder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditBuilder(ctx context.Context, in *MsgEditBuilder, opts ...grpc.CallOption) (*MsgEditBuilderResponse, error) {
	out := new(MsgEditBuilderResponse)
	err := c.cc.Invoke(ctx, Msg_EditBuilder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterProposer(ctx context.Context, in *MsgRegisterProposer, opts ...grpc.CallOption) (*MsgRegisterProposerResponse, error) {
	out := new(MsgRegisterProposerResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterProposer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommitSegment(ctx context.Context, in *MsgCommitSegment, opts ...grpc.CallOption) (*MsgCommitSegmentResponse, error) {
	out := new(MsgCommitSegmentResponse)
	err := c.cc.Invoke(ctx, Msg_CommitSegment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReportProposer(ctx context.Context, in *MsgReportProposer, opts ...grpc.CallOption) (*MsgReportProposerResponse, error) {
	out := new(MsgReportProposerResponse)
	err := c.cc.Invoke(ctx, Msg_ReportProposer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// RegisterBuilder defines a method for registering an off-chain builder.
	RegisterBuilder(context.Context, *MsgRegisterBuilder) (*MsgRegisterBuilderResponse, error)
	// EditBuilder defines a method for editing an off-chain builder.
	EditBuilder(context.Context, *MsgEditBuilder) (*MsgEditBuilderResponse, error)
	// RegisterProposer defines a method for registering a proposer for off-chain building.
	RegisterProposer(context.Context, *MsgRegisterProposer) (*MsgRegisterProposerResponse, error)
	// CommitSegment defines a method for committing a builder segment which also
	// transfers their promised payment to the builder module address.
	CommitSegment(context.Context, *MsgCommitSegment) (*MsgCommitSegmentResponse, error)
	// ReportProposer defines a method for a builder to submit evidence
	// that a proposer didn't honour its proposer commitment.
	ReportProposer(context.Context, *MsgReportProposer) (*MsgReportProposerResponse, error)
	// UpdateParams defines a governance operation for updating the x/mev module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) RegisterBuilder(context.Context, *MsgRegisterBuilder) (*MsgRegisterBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBuilder not implemented")
}
func (UnimplementedMsgServer) EditBuilder(context.Context, *MsgEditBuilder) (*MsgEditBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBuilder not implemented")
}
func (UnimplementedMsgServer) RegisterProposer(context.Context, *MsgRegisterProposer) (*MsgRegisterProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProposer not implemented")
}
func (UnimplementedMsgServer) CommitSegment(context.Context, *MsgCommitSegment) (*MsgCommitSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitSegment not implemented")
}
func (UnimplementedMsgServer) ReportProposer(context.Context, *MsgReportProposer) (*MsgReportProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProposer not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RegisterBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterBuilder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterBuilder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterBuilder(ctx, req.(*MsgRegisterBuilder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditBuilder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EditBuilder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditBuilder(ctx, req.(*MsgEditBuilder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterProposer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterProposer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterProposer(ctx, req.(*MsgRegisterProposer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommitSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CommitSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitSegment(ctx, req.(*MsgCommitSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReportProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReportProposer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReportProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReportProposer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReportProposer(ctx, req.(*MsgReportProposer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.mev.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBuilder",
			Handler:    _Msg_RegisterBuilder_Handler,
		},
		{
			MethodName: "EditBuilder",
			Handler:    _Msg_EditBuilder_Handler,
		},
		{
			MethodName: "RegisterProposer",
			Handler:    _Msg_RegisterProposer_Handler,
		},
		{
			MethodName: "CommitSegment",
			Handler:    _Msg_CommitSegment_Handler,
		},
		{
			MethodName: "ReportProposer",
			Handler:    _Msg_ReportProposer_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/mev/v1alpha1/tx.proto",
}
