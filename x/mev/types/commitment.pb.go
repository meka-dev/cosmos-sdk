// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/mev/v1alpha1/commitment.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SegmentCommitment represents a mutual commitment between a proposer and a builder,
// in which a proposer commits to include a winning builder's segment as a result of
// an spot auction of block space in the builder module, and a builder commits to
// to produce that segment according to the proposer's preferences and to pay the
// promised amount.
type SegmentCommitment struct {
	// proposer_address is the address of the proposer's pub key.
	ProposerAddress string `protobuf:"bytes,1,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"`
	// builder_address is the address of the builder's pub key.
	BuilderAddress string `protobuf:"bytes,2,opt,name=builder_address,json=builderAddress,proto3" json:"builder_address,omitempty"`
	// chain_id is the id of the chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// height of the block the segment is for.
	Height int64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// preference_ids the proposer asked the builder to honor.
	PreferenceIds []string `protobuf:"bytes,5,rep,name=preference_ids,json=preferenceIds,proto3" json:"preference_ids,omitempty"`
	// prefix_offset of the prefix section of the block being built.
	PrefixOffset int32 `protobuf:"varint,6,opt,name=prefix_offset,json=prefixOffset,proto3" json:"prefix_offset,omitempty"`
	// prefix_length of the prefix section of the block being built.
	PrefixLength int32 `protobuf:"varint,7,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// prefix_hash of the prefix section transactions.
	PrefixHash []byte `protobuf:"bytes,8,opt,name=prefix_hash,json=prefixHash,proto3" json:"prefix_hash,omitempty"`
	// segment_offset of the segment section of the block being built.
	SegmentOffset int32 `protobuf:"varint,9,opt,name=segment_offset,json=segmentOffset,proto3" json:"segment_offset,omitempty"`
	// segment_length of the segment section of the block being built.
	SegmentLength int32 `protobuf:"varint,10,opt,name=segment_length,json=segmentLength,proto3" json:"segment_length,omitempty"`
	// segment_bytes count of the segment section of the block being built.
	SegmentBytes int32 `protobuf:"varint,11,opt,name=segment_bytes,json=segmentBytes,proto3" json:"segment_bytes,omitempty"`
	// segment_gas used of the segment section of the block being built.
	SegmentGas int32 `protobuf:"varint,12,opt,name=segment_gas,json=segmentGas,proto3" json:"segment_gas,omitempty"`
	// segment_hash of the segment section transactions.
	SegmentHash []byte `protobuf:"bytes,13,opt,name=segment_hash,json=segmentHash,proto3" json:"segment_hash,omitempty"`
	// payment_promise the builder offers for segment inclusion.
	PaymentPromise string `protobuf:"bytes,14,opt,name=payment_promise,json=paymentPromise,proto3" json:"payment_promise,omitempty"`
	// proposer_signature of all the above fields as defined
	// by the builder module.
	ProposerSignature []byte `protobuf:"bytes,15,opt,name=proposer_signature,json=proposerSignature,proto3" json:"proposer_signature,omitempty"`
	// builder_signature of all the above fields as defined
	// by the builder module.
	BuilderSignature []byte `protobuf:"bytes,16,opt,name=builder_signature,json=builderSignature,proto3" json:"builder_signature,omitempty"`
}

func (m *SegmentCommitment) Reset()         { *m = SegmentCommitment{} }
func (m *SegmentCommitment) String() string { return proto.CompactTextString(m) }
func (*SegmentCommitment) ProtoMessage()    {}
func (*SegmentCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c90f5ba994280af, []int{0}
}
func (m *SegmentCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentCommitment.Merge(m, src)
}
func (m *SegmentCommitment) XXX_Size() int {
	return m.Size()
}
func (m *SegmentCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentCommitment proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SegmentCommitment)(nil), "cosmos.mev.v1alpha1.SegmentCommitment")
}

func init() {
	proto.RegisterFile("cosmos/mev/v1alpha1/commitment.proto", fileDescriptor_6c90f5ba994280af)
}

var fileDescriptor_6c90f5ba994280af = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x3d, 0x8f, 0x12, 0x41,
	0x18, 0xc7, 0x59, 0x11, 0x0e, 0xe6, 0x78, 0x1d, 0x2f, 0x66, 0xb8, 0x62, 0x41, 0x4f, 0xe3, 0x26,
	0x06, 0x36, 0xc4, 0xce, 0xee, 0xb8, 0x42, 0x2f, 0x31, 0xd1, 0x2c, 0x9d, 0xcd, 0x66, 0x96, 0x1d,
	0x66, 0x27, 0xb2, 0x3b, 0x9b, 0x9d, 0x81, 0x1c, 0xdf, 0xc0, 0xd2, 0x8f, 0x70, 0x95, 0x9f, 0xc0,
	0x0f, 0x61, 0x79, 0xb1, 0xb2, 0x34, 0xd0, 0xf8, 0x31, 0xcc, 0xce, 0x0b, 0x87, 0xd5, 0x55, 0xcc,
	0xfc, 0x9e, 0xdf, 0xf3, 0x3c, 0xff, 0xc0, 0x00, 0x5e, 0x2c, 0xb8, 0x48, 0xb9, 0xf0, 0x53, 0xb2,
	0xf1, 0x37, 0x53, 0xbc, 0xca, 0x13, 0x3c, 0xf5, 0x17, 0x3c, 0x4d, 0x99, 0x4c, 0x49, 0x26, 0x27,
	0x79, 0xc1, 0x25, 0x87, 0x4f, 0xb4, 0x35, 0x49, 0xc9, 0x66, 0x62, 0xad, 0xf3, 0x01, 0xe5, 0x9c,
	0xae, 0x88, 0xaf, 0x94, 0x68, 0xbd, 0xf4, 0x71, 0xb6, 0xd5, 0xfe, 0xf9, 0x19, 0xe5, 0x94, 0xab,
	0xa3, 0x5f, 0x9e, 0x0c, 0x75, 0xcd, 0xae, 0x08, 0x0b, 0xe2, 0x6f, 0xa6, 0x11, 0x91, 0x6a, 0x17,
	0xcb, 0x4c, 0x7d, 0xa0, 0xeb, 0xa1, 0x6e, 0x34, 0x2b, 0xd5, 0xe5, 0xf9, 0xf7, 0x1a, 0xe8, 0xcf,
	0x09, 0x2d, 0x23, 0x5d, 0x1d, 0xc2, 0xc1, 0x2b, 0xd0, 0xcb, 0x0b, 0x9e, 0x73, 0x41, 0x8a, 0x10,
	0xc7, 0x71, 0x41, 0x84, 0x40, 0xce, 0xc8, 0xf1, 0x9a, 0x33, 0xf4, 0xeb, 0xc7, 0xf8, 0xcc, 0x4c,
	0xb8, 0xd4, 0x95, 0xb9, 0x2c, 0x58, 0x46, 0x83, 0xae, 0xed, 0x30, 0x18, 0x5e, 0x82, 0x6e, 0xb4,
	0x66, 0xab, 0xf8, 0x68, 0xc6, 0xa3, 0x07, 0x66, 0x74, 0x4c, 0x83, 0x1d, 0x31, 0x00, 0x8d, 0x45,
	0x82, 0x59, 0x16, 0xb2, 0x18, 0x55, 0xcb, 0xde, 0xe0, 0x44, 0xdd, 0xaf, 0x63, 0xf8, 0x14, 0xd4,
	0x13, 0xc2, 0x68, 0x22, 0xd1, 0xe3, 0x91, 0xe3, 0x55, 0x03, 0x73, 0x83, 0x2f, 0x41, 0x27, 0x2f,
	0xc8, 0x92, 0x14, 0x24, 0x5b, 0x90, 0x90, 0xc5, 0x02, 0xd5, 0x46, 0x55, 0xaf, 0x19, 0xb4, 0xef,
	0xe9, 0x75, 0x2c, 0xe0, 0x05, 0x50, 0x80, 0xdd, 0x84, 0x7c, 0xb9, 0x14, 0x44, 0xa2, 0xfa, 0xc8,
	0xf1, 0x6a, 0x41, 0x4b, 0xc3, 0x8f, 0x8a, 0x1d, 0x49, 0x2b, 0x92, 0x51, 0x99, 0xa0, 0x93, 0x63,
	0xe9, 0x83, 0x62, 0x70, 0x08, 0x4e, 0x8d, 0x94, 0x60, 0x91, 0xa0, 0xc6, 0xc8, 0xf1, 0x5a, 0x01,
	0xd0, 0xe8, 0x3d, 0x16, 0x49, 0x99, 0x48, 0xe8, 0x6f, 0xd8, 0xee, 0x6a, 0xaa, 0x31, 0x6d, 0x43,
	0xcd, 0xb2, 0x23, 0xcd, 0x6c, 0x03, 0xff, 0x69, 0x66, 0xdd, 0x05, 0xb0, 0x20, 0x8c, 0xb6, 0x92,
	0x08, 0x74, 0xaa, 0x33, 0x19, 0x38, 0x2b, 0x59, 0x99, 0xc9, 0x4a, 0x14, 0x0b, 0xd4, 0x52, 0x0a,
	0x30, 0xe8, 0x1d, 0x16, 0xf0, 0x19, 0xb0, 0x0d, 0x3a, 0x75, 0x5b, 0xa5, 0xb6, 0x4d, 0x2a, 0xf6,
	0x2b, 0xd0, 0xcd, 0xf1, 0x56, 0x29, 0x79, 0xc1, 0x53, 0x26, 0x08, 0xea, 0xa8, 0x9f, 0xa0, 0x63,
	0xf0, 0x27, 0x4d, 0xe1, 0x18, 0xc0, 0xc3, 0x63, 0x11, 0x8c, 0x66, 0x58, 0xae, 0x0b, 0x82, 0xba,
	0x6a, 0x62, 0xdf, 0x56, 0xe6, 0xb6, 0x00, 0x5f, 0x83, 0xbe, 0x7d, 0x16, 0xf7, 0x76, 0x4f, 0xd9,
	0x3d, 0x53, 0x38, 0xc8, 0x6f, 0x1b, 0x5f, 0x6f, 0x87, 0x95, 0xbf, 0xb7, 0xc3, 0xca, 0x6c, 0xf6,
	0x73, 0xe7, 0x3a, 0x77, 0x3b, 0xd7, 0xf9, 0xb3, 0x73, 0x9d, 0x6f, 0x7b, 0xb7, 0x72, 0xb7, 0x77,
	0x2b, 0xbf, 0xf7, 0x6e, 0xe5, 0xb3, 0x47, 0x99, 0x4c, 0xd6, 0xd1, 0x64, 0xc1, 0x53, 0xf3, 0xb6,
	0xcd, 0xc7, 0x58, 0xc4, 0x5f, 0xfc, 0x1b, 0xf5, 0x0f, 0x94, 0xdb, 0x9c, 0x88, 0xa8, 0xae, 0xde,
	0xfc, 0x9b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x0c, 0x23, 0x1c, 0x9c, 0x03, 0x00, 0x00,
}

func (m *SegmentCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuilderSignature) > 0 {
		i -= len(m.BuilderSignature)
		copy(dAtA[i:], m.BuilderSignature)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.BuilderSignature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ProposerSignature) > 0 {
		i -= len(m.ProposerSignature)
		copy(dAtA[i:], m.ProposerSignature)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.ProposerSignature)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PaymentPromise) > 0 {
		i -= len(m.PaymentPromise)
		copy(dAtA[i:], m.PaymentPromise)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.PaymentPromise)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SegmentHash) > 0 {
		i -= len(m.SegmentHash)
		copy(dAtA[i:], m.SegmentHash)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.SegmentHash)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SegmentGas != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.SegmentGas))
		i--
		dAtA[i] = 0x60
	}
	if m.SegmentBytes != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.SegmentBytes))
		i--
		dAtA[i] = 0x58
	}
	if m.SegmentLength != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.SegmentLength))
		i--
		dAtA[i] = 0x50
	}
	if m.SegmentOffset != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.SegmentOffset))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PrefixHash) > 0 {
		i -= len(m.PrefixHash)
		copy(dAtA[i:], m.PrefixHash)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.PrefixHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.PrefixLength != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.PrefixLength))
		i--
		dAtA[i] = 0x38
	}
	if m.PrefixOffset != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.PrefixOffset))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PreferenceIds) > 0 {
		for iNdEx := len(m.PreferenceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferenceIds[iNdEx])
			copy(dAtA[i:], m.PreferenceIds[iNdEx])
			i = encodeVarintCommitment(dAtA, i, uint64(len(m.PreferenceIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Height != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuilderAddress) > 0 {
		i -= len(m.BuilderAddress)
		copy(dAtA[i:], m.BuilderAddress)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.BuilderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposerAddress) > 0 {
		i -= len(m.ProposerAddress)
		copy(dAtA[i:], m.ProposerAddress)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.ProposerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommitment(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SegmentCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposerAddress)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.BuilderAddress)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovCommitment(uint64(m.Height))
	}
	if len(m.PreferenceIds) > 0 {
		for _, s := range m.PreferenceIds {
			l = len(s)
			n += 1 + l + sovCommitment(uint64(l))
		}
	}
	if m.PrefixOffset != 0 {
		n += 1 + sovCommitment(uint64(m.PrefixOffset))
	}
	if m.PrefixLength != 0 {
		n += 1 + sovCommitment(uint64(m.PrefixLength))
	}
	l = len(m.PrefixHash)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.SegmentOffset != 0 {
		n += 1 + sovCommitment(uint64(m.SegmentOffset))
	}
	if m.SegmentLength != 0 {
		n += 1 + sovCommitment(uint64(m.SegmentLength))
	}
	if m.SegmentBytes != 0 {
		n += 1 + sovCommitment(uint64(m.SegmentBytes))
	}
	if m.SegmentGas != 0 {
		n += 1 + sovCommitment(uint64(m.SegmentGas))
	}
	l = len(m.SegmentHash)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.PaymentPromise)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.ProposerSignature)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.BuilderSignature)
	if l > 0 {
		n += 2 + l + sovCommitment(uint64(l))
	}
	return n
}

func sovCommitment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitment(x uint64) (n int) {
	return sovCommitment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SegmentCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuilderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferenceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferenceIds = append(m.PreferenceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixOffset", wireType)
			}
			m.PrefixOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLength", wireType)
			}
			m.PrefixLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrefixHash = append(m.PrefixHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrefixHash == nil {
				m.PrefixHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentOffset", wireType)
			}
			m.SegmentOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentLength", wireType)
			}
			m.SegmentLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentBytes", wireType)
			}
			m.SegmentBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentBytes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentGas", wireType)
			}
			m.SegmentGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentGas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentHash = append(m.SegmentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SegmentHash == nil {
				m.SegmentHash = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentPromise", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentPromise = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerSignature = append(m.ProposerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposerSignature == nil {
				m.ProposerSignature = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuilderSignature = append(m.BuilderSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BuilderSignature == nil {
				m.BuilderSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitment = fmt.Errorf("proto: unexpected end of group")
)
