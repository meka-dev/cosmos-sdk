// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/mev/v1alpha1/proposer.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Proposer represents a proposing validator identity used by
// the builder module.
type Proposer struct {
	// address is the address of the proposer's builder module pub key
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pubkey is the pub key of the proposer used by the builder module to sign
	// requests and commitments.
	Pubkey *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// operator_address is the address of the proposer's operator key (i.e. staking key)
	OperatorAddress string `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// operator_pubkey is the operator pub key of the proposer that is used to sign registration and
	// establish a chain of trust
	OperatorPubkey *types.Any `protobuf:"bytes,4,opt,name=operator_pubkey,json=operatorPubkey,proto3" json:"operator_pubkey,omitempty"`
}

func (m *Proposer) Reset()         { *m = Proposer{} }
func (m *Proposer) String() string { return proto.CompactTextString(m) }
func (*Proposer) ProtoMessage()    {}
func (*Proposer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f65dbea9d5a0307b, []int{0}
}
func (m *Proposer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposer.Merge(m, src)
}
func (m *Proposer) XXX_Size() int {
	return m.Size()
}
func (m *Proposer) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposer.DiscardUnknown(m)
}

var xxx_messageInfo_Proposer proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Proposer)(nil), "cosmos.mev.v1alpha1.Proposer")
}

func init() {
	proto.RegisterFile("cosmos/mev/v1alpha1/proposer.proto", fileDescriptor_f65dbea9d5a0307b)
}

var fileDescriptor_f65dbea9d5a0307b = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xb1, 0x4e, 0xf3, 0x30,
	0x10, 0x80, 0x93, 0xfe, 0xbf, 0x4a, 0x09, 0x12, 0xa0, 0xd0, 0x21, 0xed, 0xe0, 0x56, 0x9d, 0xba,
	0xd4, 0x56, 0xca, 0xc6, 0xd6, 0x20, 0xb1, 0xb0, 0x54, 0x65, 0x40, 0x62, 0xa9, 0xec, 0xd4, 0xa4,
	0x55, 0x9b, 0x9c, 0x65, 0x3b, 0x11, 0x79, 0x03, 0x46, 0x1e, 0xa1, 0x4f, 0xc0, 0xc4, 0x43, 0x20,
	0xa6, 0x8a, 0x89, 0x11, 0xb5, 0x0b, 0x8f, 0x81, 0x48, 0x1c, 0x18, 0x91, 0x98, 0x7c, 0xbe, 0xfb,
	0xee, 0xee, 0x93, 0x65, 0xa7, 0x17, 0x82, 0x8a, 0x41, 0x91, 0x98, 0x67, 0x24, 0xf3, 0xe9, 0x4a,
	0xcc, 0xa9, 0x4f, 0x84, 0x04, 0x01, 0x8a, 0x4b, 0x2c, 0x24, 0x68, 0x70, 0x4f, 0x4a, 0x06, 0xc7,
	0x3c, 0xc3, 0x15, 0xd3, 0x6e, 0x45, 0x00, 0xd1, 0x8a, 0x93, 0x02, 0x61, 0xe9, 0x2d, 0xa1, 0x49,
	0x5e, 0xf2, 0xed, 0x66, 0x04, 0x11, 0x14, 0x21, 0xf9, 0x8a, 0x4c, 0x16, 0x99, 0x4d, 0x8c, 0x2a,
	0x4e, 0x32, 0x9f, 0x71, 0x4d, 0x7d, 0x12, 0xc2, 0x22, 0x31, 0xf5, 0x56, 0x59, 0x9f, 0x96, 0x8d,
	0x66, 0x65, 0x71, 0xe9, 0x3d, 0xd6, 0x9c, 0xc6, 0xd8, 0x38, 0xb9, 0x43, 0x67, 0x8f, 0xce, 0x66,
	0x92, 0x2b, 0xe5, 0xd9, 0x5d, 0xbb, 0xbf, 0x1f, 0x78, 0xaf, 0x4f, 0x83, 0xa6, 0xe1, 0x47, 0x65,
	0xe5, 0x4a, 0xcb, 0x45, 0x12, 0x4d, 0x2a, 0xd0, 0xbd, 0x70, 0xea, 0x22, 0x65, 0x4b, 0x9e, 0x7b,
	0xb5, 0xae, 0xdd, 0x3f, 0x18, 0x36, 0x71, 0x69, 0x8f, 0x2b, 0x7b, 0x3c, 0x4a, 0xf2, 0xc0, 0x7b,
	0xf9, 0x19, 0x14, 0xca, 0x5c, 0x68, 0xc0, 0xe3, 0x94, 0x5d, 0xf2, 0x7c, 0x62, 0xba, 0xdd, 0x73,
	0xe7, 0x18, 0x04, 0x97, 0x54, 0x83, 0x9c, 0x56, 0x12, 0xff, 0x7e, 0x91, 0x38, 0xaa, 0x3a, 0x4c,
	0xda, 0xbd, 0x76, 0xbe, 0x53, 0x53, 0x63, 0xf5, 0xff, 0x4f, 0x56, 0x87, 0xd5, 0x98, 0x71, 0x31,
	0xe5, 0xac, 0x71, 0xbf, 0xee, 0x58, 0x1f, 0xeb, 0x8e, 0x15, 0x04, 0xcf, 0x5b, 0x64, 0x6f, 0xb6,
	0xc8, 0x7e, 0xdf, 0x22, 0xfb, 0x61, 0x87, 0xac, 0xcd, 0x0e, 0x59, 0x6f, 0x3b, 0x64, 0xdd, 0xf4,
	0xa3, 0x85, 0x9e, 0xa7, 0x0c, 0x87, 0x10, 0x9b, 0x37, 0x36, 0xc7, 0x40, 0xcd, 0x96, 0xe4, 0xae,
	0xf8, 0x07, 0x3a, 0x17, 0x5c, 0xb1, 0x7a, 0x61, 0x71, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0xda, 0x4c, 0xa8, 0x22, 0x02, 0x00, 0x00,
}

func (m *Proposer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorPubkey != nil {
		{
			size, err := m.OperatorPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintProposer(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposer(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposer(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposer(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovProposer(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovProposer(uint64(l))
	}
	if m.OperatorPubkey != nil {
		l = m.OperatorPubkey.Size()
		n += 1 + l + sovProposer(uint64(l))
	}
	return n
}

func sovProposer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposer(x uint64) (n int) {
	return sovProposer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorPubkey == nil {
				m.OperatorPubkey = &types.Any{}
			}
			if err := m.OperatorPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposer = fmt.Errorf("proto: unexpected end of group")
)
