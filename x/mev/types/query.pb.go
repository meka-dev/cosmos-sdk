// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/mev/v1alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryBuilderRequest is the request type for the Query/Builder RPC method.
type QueryBuilderRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryBuilderRequest) Reset()         { *m = QueryBuilderRequest{} }
func (m *QueryBuilderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuilderRequest) ProtoMessage()    {}
func (*QueryBuilderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{0}
}
func (m *QueryBuilderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuilderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuilderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuilderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuilderRequest.Merge(m, src)
}
func (m *QueryBuilderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuilderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuilderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuilderRequest proto.InternalMessageInfo

func (m *QueryBuilderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryBuilderResponse is the response type for the Query/Builders RPC method.
type QueryBuilderResponse struct {
	Builder Builder `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder"`
}

func (m *QueryBuilderResponse) Reset()         { *m = QueryBuilderResponse{} }
func (m *QueryBuilderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuilderResponse) ProtoMessage()    {}
func (*QueryBuilderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{1}
}
func (m *QueryBuilderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuilderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuilderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuilderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuilderResponse.Merge(m, src)
}
func (m *QueryBuilderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuilderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuilderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuilderResponse proto.InternalMessageInfo

func (m *QueryBuilderResponse) GetBuilder() Builder {
	if m != nil {
		return m.Builder
	}
	return Builder{}
}

// QueryBuildersRequest is the request type for the Query/Builders RPC method.
type QueryBuildersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBuildersRequest) Reset()         { *m = QueryBuildersRequest{} }
func (m *QueryBuildersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuildersRequest) ProtoMessage()    {}
func (*QueryBuildersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{2}
}
func (m *QueryBuildersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuildersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuildersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuildersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuildersRequest.Merge(m, src)
}
func (m *QueryBuildersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuildersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuildersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuildersRequest proto.InternalMessageInfo

func (m *QueryBuildersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBuildersResponse is the response type for the Query/Builder RPC method.
type QueryBuildersResponse struct {
	Builders   []Builder           `protobuf:"bytes,1,rep,name=builders,proto3" json:"builders"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBuildersResponse) Reset()         { *m = QueryBuildersResponse{} }
func (m *QueryBuildersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuildersResponse) ProtoMessage()    {}
func (*QueryBuildersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{3}
}
func (m *QueryBuildersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuildersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuildersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuildersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuildersResponse.Merge(m, src)
}
func (m *QueryBuildersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuildersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuildersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuildersResponse proto.InternalMessageInfo

func (m *QueryBuildersResponse) GetBuilders() []Builder {
	if m != nil {
		return m.Builders
	}
	return nil
}

func (m *QueryBuildersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProposerRequest is the request type for the Query/Proposer RPC method.
type QueryProposerRequest struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Infractions bool   `protobuf:"varint,2,opt,name=infractions,proto3" json:"infractions,omitempty"`
}

func (m *QueryProposerRequest) Reset()         { *m = QueryProposerRequest{} }
func (m *QueryProposerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposerRequest) ProtoMessage()    {}
func (*QueryProposerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{4}
}
func (m *QueryProposerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposerRequest.Merge(m, src)
}
func (m *QueryProposerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposerRequest proto.InternalMessageInfo

func (m *QueryProposerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryProposerRequest) GetInfractions() bool {
	if m != nil {
		return m.Infractions
	}
	return false
}

// QueryProposerResponse is the response type for the Query/Proposer RPC method.
type QueryProposerResponse struct {
	Proposer    Proposer             `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer"`
	Validator   *types.Validator     `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Infractions []*SegmentCommitment `protobuf:"bytes,3,rep,name=infractions,proto3" json:"infractions,omitempty"`
}

func (m *QueryProposerResponse) Reset()         { *m = QueryProposerResponse{} }
func (m *QueryProposerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposerResponse) ProtoMessage()    {}
func (*QueryProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{5}
}
func (m *QueryProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposerResponse.Merge(m, src)
}
func (m *QueryProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposerResponse proto.InternalMessageInfo

func (m *QueryProposerResponse) GetProposer() Proposer {
	if m != nil {
		return m.Proposer
	}
	return Proposer{}
}

func (m *QueryProposerResponse) GetValidator() *types.Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *QueryProposerResponse) GetInfractions() []*SegmentCommitment {
	if m != nil {
		return m.Infractions
	}
	return nil
}

// QueryProposersRequest is the request type for the Query/Proposers RPC method.
type QueryProposersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProposersRequest) Reset()         { *m = QueryProposersRequest{} }
func (m *QueryProposersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposersRequest) ProtoMessage()    {}
func (*QueryProposersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{6}
}
func (m *QueryProposersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposersRequest.Merge(m, src)
}
func (m *QueryProposersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposersRequest proto.InternalMessageInfo

func (m *QueryProposersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProposersResponse is the response type for the Query/Proposers RPC method.
type QueryProposersResponse struct {
	Proposers  []Proposer          `protobuf:"bytes,1,rep,name=proposers,proto3" json:"proposers"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProposersResponse) Reset()         { *m = QueryProposersResponse{} }
func (m *QueryProposersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposersResponse) ProtoMessage()    {}
func (*QueryProposersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_581bc4343abbeba5, []int{7}
}
func (m *QueryProposersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposersResponse.Merge(m, src)
}
func (m *QueryProposersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposersResponse proto.InternalMessageInfo

func (m *QueryProposersResponse) GetProposers() []Proposer {
	if m != nil {
		return m.Proposers
	}
	return nil
}

func (m *QueryProposersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryBuilderRequest)(nil), "cosmos.mev.v1alpha1.QueryBuilderRequest")
	proto.RegisterType((*QueryBuilderResponse)(nil), "cosmos.mev.v1alpha1.QueryBuilderResponse")
	proto.RegisterType((*QueryBuildersRequest)(nil), "cosmos.mev.v1alpha1.QueryBuildersRequest")
	proto.RegisterType((*QueryBuildersResponse)(nil), "cosmos.mev.v1alpha1.QueryBuildersResponse")
	proto.RegisterType((*QueryProposerRequest)(nil), "cosmos.mev.v1alpha1.QueryProposerRequest")
	proto.RegisterType((*QueryProposerResponse)(nil), "cosmos.mev.v1alpha1.QueryProposerResponse")
	proto.RegisterType((*QueryProposersRequest)(nil), "cosmos.mev.v1alpha1.QueryProposersRequest")
	proto.RegisterType((*QueryProposersResponse)(nil), "cosmos.mev.v1alpha1.QueryProposersResponse")
}

func init() { proto.RegisterFile("cosmos/mev/v1alpha1/query.proto", fileDescriptor_581bc4343abbeba5) }

var fileDescriptor_581bc4343abbeba5 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xbb, 0x80, 0xd2, 0x0e, 0xb7, 0x01, 0x0d, 0x54, 0x28, 0xb0, 0x41, 0x7e, 0x19, 0x76,
	0x52, 0xbc, 0x1a, 0x09, 0x35, 0xf1, 0xc7, 0x0d, 0x17, 0xe3, 0xc1, 0x83, 0x64, 0xda, 0x8e, 0xcb,
	0x86, 0xee, 0xce, 0xb2, 0x33, 0x6d, 0x24, 0xc6, 0x8b, 0xf1, 0xa4, 0x17, 0xa3, 0xff, 0x80, 0x07,
	0xff, 0x04, 0xcf, 0x9e, 0x39, 0x12, 0xbd, 0x78, 0x32, 0x86, 0xfa, 0x87, 0x98, 0x9d, 0x7d, 0xb3,
	0xed, 0x6e, 0xd6, 0xb2, 0x89, 0x9c, 0xda, 0x99, 0x7e, 0xdf, 0x7b, 0x9f, 0xf9, 0xbe, 0x37, 0x53,
	0xb4, 0xd8, 0xe2, 0xc2, 0xe3, 0x82, 0x78, 0xac, 0x47, 0x7a, 0x75, 0xda, 0x09, 0x0e, 0x69, 0x9d,
	0x1c, 0x77, 0x59, 0x78, 0x62, 0x05, 0x21, 0x97, 0x1c, 0x4f, 0xc7, 0x02, 0xcb, 0x63, 0x3d, 0x4b,
	0x0b, 0xaa, 0x73, 0xf1, 0xe6, 0x81, 0x92, 0x10, 0x50, 0xa8, 0x45, 0x75, 0xc6, 0xe1, 0x0e, 0x8f,
	0xf7, 0xa3, 0x6f, 0xb0, 0x3b, 0xef, 0x70, 0xee, 0x74, 0x18, 0xa1, 0x81, 0x4b, 0xa8, 0xef, 0x73,
	0x49, 0xa5, 0xcb, 0x7d, 0x1d, 0xb3, 0x09, 0x10, 0x4d, 0x2a, 0x58, 0x5c, 0x9c, 0xf4, 0xea, 0x4d,
	0x26, 0x69, 0x9d, 0x04, 0xd4, 0x71, 0x7d, 0x25, 0x06, 0xed, 0x72, 0x1e, 0x70, 0xb3, 0xeb, 0x76,
	0xda, 0x2c, 0x04, 0x89, 0x99, 0x27, 0x09, 0x42, 0x1e, 0x70, 0x91, 0x68, 0x56, 0xf2, 0x34, 0x2d,
	0xee, 0x79, 0xae, 0xf4, 0x98, 0x2f, 0x33, 0x2a, 0x21, 0xe9, 0x91, 0xeb, 0x3b, 0x09, 0x15, 0xac,
	0x63, 0x95, 0xf9, 0x08, 0x4d, 0x3f, 0x8e, 0xa0, 0x1b, 0x31, 0x85, 0xcd, 0x8e, 0xbb, 0x4c, 0x48,
	0xbc, 0x8d, 0x26, 0x69, 0xbb, 0x1d, 0x32, 0x21, 0x66, 0x8d, 0x25, 0x63, 0xbd, 0xd2, 0x98, 0xfd,
	0xfe, 0x75, 0x6b, 0x06, 0xcc, 0xda, 0x8d, 0x7f, 0xd9, 0x97, 0xa1, 0xeb, 0x3b, 0xb6, 0x16, 0x9a,
	0x4f, 0xd0, 0x4c, 0x3a, 0x95, 0x08, 0xb8, 0x2f, 0x18, 0xbe, 0x83, 0x26, 0xe1, 0x8c, 0x2a, 0xd7,
	0xd4, 0xf6, 0xbc, 0x95, 0xd3, 0x17, 0x0b, 0xc2, 0x1a, 0x13, 0xa7, 0xbf, 0x16, 0x4b, 0xb6, 0x0e,
	0x31, 0x9f, 0xa7, 0xb3, 0x0a, 0x4d, 0x78, 0x1f, 0xa1, 0x81, 0xbf, 0x90, 0x78, 0x55, 0x27, 0x8e,
	0x9a, 0x61, 0xc5, 0x93, 0x00, 0xc7, 0xb6, 0xf6, 0xa8, 0xc3, 0x20, 0xd6, 0x1e, 0x8a, 0x34, 0x3f,
	0x1b, 0xe8, 0x5a, 0xa6, 0x00, 0x70, 0xdf, 0x45, 0x65, 0x80, 0x88, 0x4c, 0x18, 0x2f, 0x08, 0x9e,
	0xc4, 0xe0, 0x07, 0x29, 0xc2, 0x31, 0x45, 0xb8, 0x76, 0x21, 0x61, 0x5c, 0x3c, 0x85, 0xd8, 0x01,
	0x0b, 0xf6, 0x60, 0x0c, 0xfe, 0xa3, 0x49, 0x78, 0x09, 0x4d, 0xb9, 0xfe, 0x8b, 0x90, 0xb6, 0xd4,
	0x0c, 0x2b, 0xaa, 0xb2, 0x3d, 0xbc, 0x65, 0xf6, 0xb5, 0x21, 0x83, 0x72, 0x60, 0xc8, 0x0e, 0x2a,
	0xeb, 0x49, 0x04, 0xc3, 0x17, 0x72, 0x0d, 0xd1, 0x81, 0xda, 0x11, 0x1d, 0x84, 0x77, 0x50, 0xa5,
	0x47, 0x3b, 0x6e, 0x9b, 0x4a, 0x1e, 0x82, 0x21, 0xcb, 0x3a, 0x83, 0x1e, 0x4b, 0xed, 0xc6, 0x53,
	0x2d, 0xb4, 0x07, 0x31, 0xf8, 0x61, 0x9a, 0x7e, 0x5c, 0x75, 0x65, 0x35, 0x17, 0x62, 0x9f, 0x39,
	0xd1, 0x65, 0xb8, 0x97, 0x5c, 0x8b, 0xf4, 0x29, 0x0f, 0x32, 0x87, 0xbc, 0xf4, 0xb9, 0xfa, 0x62,
	0xa0, 0xeb, 0xd9, 0x0a, 0xe0, 0xe3, 0x2e, 0xaa, 0x68, 0x4b, 0xf4, 0x64, 0x15, 0x32, 0x72, 0x10,
	0x75, 0x69, 0xb3, 0xb5, 0xfd, 0x6d, 0x02, 0x5d, 0x51, 0x98, 0xf8, 0x9d, 0x81, 0x26, 0x61, 0x94,
	0xf1, 0x7a, 0x2e, 0x4e, 0xce, 0x43, 0x51, 0xdd, 0x28, 0xa0, 0x8c, 0xcb, 0x9a, 0x9b, 0x6f, 0x7e,
	0xfc, 0xf9, 0x34, 0xb6, 0x82, 0x4d, 0x92, 0xf7, 0x7e, 0x45, 0x8b, 0x57, 0x30, 0xa5, 0xaf, 0xf1,
	0x5b, 0x03, 0x95, 0xf5, 0x85, 0xc4, 0x17, 0xd7, 0xd0, 0xdd, 0xab, 0x6e, 0x16, 0x91, 0x02, 0xcf,
	0xb2, 0xe2, 0xb9, 0x81, 0xe7, 0xfe, 0xc5, 0x23, 0xf0, 0x47, 0x03, 0x95, 0x75, 0x13, 0x46, 0x61,
	0x64, 0x6e, 0xe6, 0x28, 0x8c, 0xec, 0xad, 0x32, 0x89, 0xc2, 0xd8, 0xc0, 0x6b, 0x64, 0xd4, 0xd3,
	0x3f, 0xe4, 0xcd, 0x7b, 0x03, 0x55, 0x92, 0xa1, 0xc2, 0x05, 0x4a, 0x25, 0xee, 0xdc, 0x2a, 0xa4,
	0x05, 0xae, 0x9b, 0x8a, 0x6b, 0x11, 0x2f, 0x8c, 0xe4, 0x6a, 0x34, 0x4e, 0xcf, 0x6b, 0xc6, 0xd9,
	0x79, 0xcd, 0xf8, 0x7d, 0x5e, 0x33, 0x3e, 0xf4, 0x6b, 0xa5, 0xb3, 0x7e, 0xad, 0xf4, 0xb3, 0x5f,
	0x2b, 0x3d, 0x5b, 0x77, 0x5c, 0x79, 0xd8, 0x6d, 0x5a, 0x2d, 0xee, 0xe9, 0x14, 0xf1, 0xc7, 0x96,
	0x68, 0x1f, 0x91, 0x97, 0x2a, 0x9f, 0x3c, 0x09, 0x98, 0x68, 0x5e, 0x55, 0xff, 0x45, 0xb7, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x1c, 0xe8, 0x8a, 0xd1, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Builder queries a single builder by address.
	Builder(ctx context.Context, in *QueryBuilderRequest, opts ...grpc.CallOption) (*QueryBuilderResponse, error)
	// Builder queries all builders.
	Builders(ctx context.Context, in *QueryBuildersRequest, opts ...grpc.CallOption) (*QueryBuildersResponse, error)
	// Proposer queries a single proposer by address.
	Proposer(ctx context.Context, in *QueryProposerRequest, opts ...grpc.CallOption) (*QueryProposerResponse, error)
	// Proposers queries all proposers.
	Proposers(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption) (*QueryProposersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Builder(ctx context.Context, in *QueryBuilderRequest, opts ...grpc.CallOption) (*QueryBuilderResponse, error) {
	out := new(QueryBuilderResponse)
	err := c.cc.Invoke(ctx, "/cosmos.mev.v1alpha1.Query/Builder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Builders(ctx context.Context, in *QueryBuildersRequest, opts ...grpc.CallOption) (*QueryBuildersResponse, error) {
	out := new(QueryBuildersResponse)
	err := c.cc.Invoke(ctx, "/cosmos.mev.v1alpha1.Query/Builders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposer(ctx context.Context, in *QueryProposerRequest, opts ...grpc.CallOption) (*QueryProposerResponse, error) {
	out := new(QueryProposerResponse)
	err := c.cc.Invoke(ctx, "/cosmos.mev.v1alpha1.Query/Proposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposers(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption) (*QueryProposersResponse, error) {
	out := new(QueryProposersResponse)
	err := c.cc.Invoke(ctx, "/cosmos.mev.v1alpha1.Query/Proposers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Builder queries a single builder by address.
	Builder(context.Context, *QueryBuilderRequest) (*QueryBuilderResponse, error)
	// Builder queries all builders.
	Builders(context.Context, *QueryBuildersRequest) (*QueryBuildersResponse, error)
	// Proposer queries a single proposer by address.
	Proposer(context.Context, *QueryProposerRequest) (*QueryProposerResponse, error)
	// Proposers queries all proposers.
	Proposers(context.Context, *QueryProposersRequest) (*QueryProposersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Builder(ctx context.Context, req *QueryBuilderRequest) (*QueryBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Builder not implemented")
}
func (*UnimplementedQueryServer) Builders(ctx context.Context, req *QueryBuildersRequest) (*QueryBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Builders not implemented")
}
func (*UnimplementedQueryServer) Proposer(ctx context.Context, req *QueryProposerRequest) (*QueryProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposer not implemented")
}
func (*UnimplementedQueryServer) Proposers(ctx context.Context, req *QueryProposersRequest) (*QueryProposersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Builder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Builder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.mev.v1alpha1.Query/Builder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Builder(ctx, req.(*QueryBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Builders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Builders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.mev.v1alpha1.Query/Builders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Builders(ctx, req.(*QueryBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.mev.v1alpha1.Query/Proposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposer(ctx, req.(*QueryProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.mev.v1alpha1.Query/Proposers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposers(ctx, req.(*QueryProposersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.mev.v1alpha1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Builder",
			Handler:    _Query_Builder_Handler,
		},
		{
			MethodName: "Builders",
			Handler:    _Query_Builders_Handler,
		},
		{
			MethodName: "Proposer",
			Handler:    _Query_Proposer_Handler,
		},
		{
			MethodName: "Proposers",
			Handler:    _Query_Proposers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/mev/v1alpha1/query.proto",
}

func (m *QueryBuilderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuilderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuilderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuilderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuilderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuilderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Builder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBuildersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuildersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuildersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuildersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuildersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuildersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Builders) > 0 {
		for iNdEx := len(m.Builders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Builders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Infractions {
		i--
		if m.Infractions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infractions) > 0 {
		for iNdEx := len(m.Infractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infractions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Validator != nil {
		{
			size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Proposer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProposersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposers) > 0 {
		for iNdEx := len(m.Proposers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBuilderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuilderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Builder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBuildersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuildersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Builders) > 0 {
		for _, e := range m.Builders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProposerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Infractions {
		n += 2
	}
	return n
}

func (m *QueryProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proposer.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Validator != nil {
		l = m.Validator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Infractions) > 0 {
		for _, e := range m.Infractions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryProposersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProposersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposers) > 0 {
		for _, e := range m.Proposers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBuilderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuilderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuilderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuilderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuilderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuilderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Builder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuildersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuildersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuildersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuildersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuildersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuildersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builders = append(m.Builders, Builder{})
			if err := m.Builders[len(m.Builders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infractions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Infractions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validator == nil {
				m.Validator = &types.Validator{}
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infractions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infractions = append(m.Infractions, &SegmentCommitment{})
			if err := m.Infractions[len(m.Infractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposers = append(m.Proposers, Proposer{})
			if err := m.Proposers[len(m.Proposers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
